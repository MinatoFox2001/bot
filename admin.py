from aiogram import F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from database import is_user_admin, add_admin, remove_admin, get_all_admins, get_user_info, update_balance, update_subscription, get_user_id_by_username, dict_factory
from config import ROOT_ADMIN_ID
from shared import dp, bot
import sqlite3
from datetime import datetime, timedelta
from state import admin_states, last_bot_messages, message_history
from error_logger import get_recent_errors, clear_error_logs
from error_handler import error_handler, sync_error_handler


@sync_error_handler
def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                              callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                              callback_data="admin_manage_admins")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                              callback_data="admin_users")],
        [InlineKeyboardButton(
            text="üéü –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")],
        # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                              callback_data="admin_settings")],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@sync_error_handler
def get_admins_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                              callback_data="admin_add_admin")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                              callback_data="admin_remove_admin")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤",
                              callback_data="admin_list_admins")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@error_handler
async def handle_admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await message.answer(
        "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )


@error_handler
async def handle_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    from database import get_user

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM admins")
        total_admins = cursor.fetchone()[0] + 1  # +1 –¥–ª—è root –∞–¥–º–∏–Ω–∞

        cursor.execute("SELECT SUM(balance) FROM users")
        total_balance = cursor.fetchone()[0] or 0

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} —Ä—É–±."
    )

    buttons = [[InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


@error_handler
async def handle_add_admin_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üÜî –ü–æ ID", callback_data="admin_add_by_id")],
            [InlineKeyboardButton(text="üë§ –ü–æ Username",
                                  callback_data="admin_add_by_username")],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]
        ])
    )
    await callback.answer()


@error_handler
async def handle_remove_admin_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")
        ]])
    )
    await callback.answer()


@error_handler
async def handle_list_admins(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    from config import ROOT_ADMIN_ID

    admins = get_all_admins()

    # –î–æ–±–∞–≤–ª—è–µ–º root –∞–¥–º–∏–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫
    all_admins = [{'user_id': ROOT_ADMIN_ID,
                   'added_by': 'ROOT', 'added_at': 'ROOT'}]

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    for admin in admins:
        if admin['user_id'] != ROOT_ADMIN_ID:  # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            all_admins.append(admin)

    if len(all_admins) <= 1 and all_admins[0]['user_id'] == ROOT_ADMIN_ID:
        admins_text = "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>\n\n–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç."
    else:
        admins_text = "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã</b>\n\n"
        for admin in all_admins:
            user_id = admin['user_id']
            added_by = admin['added_by']
            added_at = admin['added_at']

            if user_id == ROOT_ADMIN_ID:
                admins_text += f"üëë {user_id} (ROOT)\n"
            else:
                admins_text += f"üë§ {user_id} (–¥–æ–±–∞–≤–∏–ª: {added_by})\n"

    buttons = [[InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(admins_text, reply_markup=keyboard)
    await callback.answer()


@error_handler
async def handle_user_info(message: Message, user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_info = get_user_info(user_id)
    if not user_info:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    sub_names = {
        'free': 'Zenith Spark',
        'tier1': 'Zenith Pulse',
        'tier2': 'Zenith Nova',
        'tier3': 'Zenith Eclipse'
    }

    subscription_name = sub_names.get(
        user_info['subscription_type'], 'Zenith Spark')

    info_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"üÜî ID: {user_info['user_id']}\n"
        f"üë§ Username: @{user_info['username']}\n"
        f"üìõ –ò–º—è: {user_info['full_name']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫: {user_info['balance']} —Ä—É–±.\n"
        f"üí∏ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user_info.get('referral_balance', 0)} —Ä—É–±.\n"
        f"üì∂ –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_name}"
    )

    await message.answer(info_text)


@error_handler
async def handle_user_balance(message: Message, user_id: int, amount: int):
    """–ò–∑–º–µ–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = get_user_info(user_id)
    if not user_info:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    update_balance(user_id, amount)

    new_balance = user_info['balance'] + \
        amount if 'balance' in user_info else amount
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n"
        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} —Ä—É–±.\n"
        f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {amount:+} —Ä—É–±."
    )


@error_handler
async def handle_user_subscription(message: Message, user_id: int, sub_type: str):
    """–ò–∑–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_info = get_user_info(user_id)
    if not user_info:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if sub_type not in ['tier1', 'tier2', 'tier3', 'free']:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: tier1, tier2, tier3, free")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
    update_subscription(user_id, sub_type, 30)

    sub_names = {
        'free': 'Zenith Spark',
        'tier1': 'Zenith Pulse',
        'tier2': 'Zenith Nova',
        'tier3': 'Zenith Eclipse'
    }

    subscription_name = sub_names.get(sub_type, 'Zenith Spark')

    await message.answer(
        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n"
        f"üì∂ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {subscription_name}\n"
        f"üìÖ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π"
    )


@sync_error_handler
def get_discounts_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏"""
    buttons = [
        [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—É",
                              callback_data="admin_create_discount")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Å–∫–∏–¥–æ–∫",
                              callback_data="admin_list_discounts")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Å–∫–∏–¥–∫—É",
                              callback_data="admin_delete_discount")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@error_handler
async def handle_admin_users(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/user [ID] [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]</code>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- <code>/user [ID] info</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "- <code>/user [ID] balance [—Å—É–º–º–∞]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "- <code>/user [ID] subscription [tier1/tier2/tier3/free]</code> - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "- <code>/user [ID] discount [–ø—Ä–æ—Ü–µ–Ω—Ç] [–∫–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]</code> - —Å–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]])
    )
    await callback.answer()


@error_handler
async def handle_user_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /user"""
    if not is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /user [ID] [–∫–æ–º–∞–Ω–¥–∞] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]")
            return

        user_id = int(parts[1])
        command = parts[2].lower()

        if command == "info":
            await handle_user_info(message, user_id)
        elif command == "balance" and len(parts) >= 4:
            amount = int(parts[3])
            await handle_user_balance(message, user_id, amount)
        elif command == "subscription" and len(parts) >= 4:
            sub_type = parts[3]
            await handle_user_subscription(message, user_id, sub_type)
        elif command == "discount" and len(parts) >= 5:
            # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
            discount_percent = int(parts[3])
            max_uses = int(parts[4])
            target_subscription = parts[5] if len(parts) > 5 else None
            await handle_create_discount_for_user(message, user_id, discount_percent, max_uses, target_subscription)
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@error_handler
async def handle_create_discount_for_user(message: Message, user_id: int, discount_percent: int, max_uses: int, target_subscription: str = None):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from database import create_discount_code
    import hashlib
    import time

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
    code = f"DISC_{user_id}_{int(time.time())}_{hashlib.md5(str(time.time()).encode()).hexdigest()[:6]}".upper(
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –≤ –∫–æ–¥ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞)
    if target_subscription:
        code = f"{code}_{target_subscription.upper()}"

    # –°–æ–∑–¥–∞–µ–º —Å–∫–∏–¥–∫—É
    if create_discount_code(code, discount_percent, max_uses, message.from_user.id):
        target_info = f" –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {target_subscription}" if target_subscription else ""
        await message.answer(
            f"‚úÖ –°–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}!\n\n"
            f"üìä –°–∫–∏–¥–∫–∞: {discount_percent}%\n"
            f"üî¢ –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}\n"
            f"üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {target_info if target_info else '–ª—é–±–∞—è –ø–æ–¥–ø–∏—Å–∫–∞'}\n"
            f"üé´ –ö–æ–¥: <code>{code}</code>\n\n"
            f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥")


@error_handler
async def handle_admin_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if not is_user_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    action = callback.data

    if action == "admin_panel":
        await handle_admin_panel_callback(callback)
    elif action == "admin_stats":
        await handle_admin_stats(callback)
    elif action == "admin_manage_admins":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
            reply_markup=get_admins_keyboard()
        )
        await callback.answer()
    elif action == "admin_users":
        await handle_admin_users(callback)
    elif action == "admin_discounts":
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "üéü <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_discounts_keyboard()
        )
        await callback.answer()
    elif action == "admin_settings":  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        await handle_admin_settings(callback)
    elif action == "admin_view_errors":  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫
        await handle_view_errors(callback)
    elif action == "admin_clear_errors":  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–æ–∫
        await handle_clear_errors(callback)
    elif action == "admin_create_discount":
        admin_states[callback.from_user.id] = 'waiting_for_discount_params'
        await handle_create_discount_start(callback)
    elif action == "admin_list_discounts":
        await handle_list_discounts(callback)
    elif action == "admin_delete_discount":
        admin_states[callback.from_user.id] = 'waiting_for_discount_code_to_delete'
        await handle_delete_discount_start(callback)
    elif action == "admin_add_admin":
        await handle_add_admin_start(callback)
    elif action == "admin_add_by_id":
        admin_states[callback.from_user.id] = 'waiting_for_admin_id_to_add'
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]])
        )
        await callback.answer()
    elif action == "admin_add_by_username":
        admin_states[callback.from_user.id] = 'waiting_for_admin_username_to_add'
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n"
            "–ü—Ä–∏–º–µ—Ä: @username\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="admin_manage_admins")]])
        )
        await callback.answer()
    elif action == "admin_remove_admin":
        admin_states[callback.from_user.id] = 'waiting_for_admin_id_to_remove'
        await handle_remove_admin_start(callback)
    elif action == "admin_list_admins":
        await handle_list_admins(callback)
    elif action == "admin_back":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if callback.from_user.id in admin_states:
            del admin_states[callback.from_user.id]

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        await callback.message.edit_text(
            "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=get_admin_keyboard()
        )
        await callback.answer()
    elif action == "admin_back_to_main":
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if callback.from_user.id in admin_states:
            del admin_states[callback.from_user.id]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        from messages import get_welcome_message
        from bot import get_main_keyboard

        welcome_text = get_welcome_message(callback.from_user.id)
        keyboard = get_main_keyboard(callback.from_user.id)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
        try:
            await callback.message.edit_text(
                welcome_text,
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except:
                pass

            await callback.message.answer(
                welcome_text,
                reply_markup=keyboard
            )

        await callback.answer()


@error_handler
async def handle_create_discount_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∏–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>[–∫–æ–¥] [–ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏] [–º–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>NEW2024 15 100</code>\n"
        "–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –∫–æ–¥ NEW2024 —Å–æ —Å–∫–∏–¥–∫–æ–π 15% –∏ 100 –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_discounts")]])
    )
    await callback.answer()


@error_handler
async def handle_delete_discount_start(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–∫–∏–¥–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_discounts")]])
    )
    await callback.answer()


@error_handler
async def handle_list_discounts(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫"""
    from database import get_all_discount_codes

    discounts = get_all_discount_codes()

    if not discounts:
        discounts_text = "üéü <b>–°–∫–∏–¥–æ—á–Ω—ã–µ –∫–æ–¥—ã</b>\n\n–°–ø–∏—Å–æ–∫ —Å–∫–∏–¥–æ–∫ –ø—É—Å—Ç."
    else:
        discounts_text = "üéü <b>–°–∫–∏–¥–æ—á–Ω—ã–µ –∫–æ–¥—ã</b>\n\n"
        for discount in discounts:
            code = discount['code']
            percent = discount['discount_percent']
            max_uses = discount['max_uses']
            used = discount['used_count']
            active = "‚úÖ" if discount['is_active'] else "‚ùå"
            creator = discount['created_by']

            discounts_text += (
                f"üé´ <code>{code}</code> {active}\n"
                f"üìä {percent}% | –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{max_uses}\n"
                f"üë§ –°–æ–∑–¥–∞–ª: {creator}\n\n"
            )

    buttons = [[InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_discounts")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(discounts_text, reply_markup=keyboard)
    await callback.answer()


@error_handler
async def handle_admin_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–æ–≤"""
    if not is_user_admin(message.from_user.id):
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –æ—Ç —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∫–∞–∫–æ–π-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if user_id in admin_states:
        state = admin_states[user_id]
        if message.text.lower() == 'cancel':
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del admin_states[user_id]
            await message.answer(
                "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=get_admin_keyboard()
            )
            return

        try:
            if state == 'waiting_for_discount_params':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
                parts = message.text.split()
                if len(parts) != 3:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: [–∫–æ–¥] [–ø—Ä–æ—Ü–µ–Ω—Ç] [–º–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π]")
                    return

                code = parts[0].upper()
                discount_percent = int(parts[1])
                max_uses = int(parts[2])

                if discount_percent < 1 or discount_percent > 100:
                    await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
                    return

                if max_uses < 1:
                    await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return

                from database import create_discount_code
                if create_discount_code(code, discount_percent, max_uses, user_id):
                    await message.answer(
                        f"‚úÖ –°–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                        f"üé´ –ö–æ–¥: {code}\n"
                        f"üìä –°–∫–∏–¥–∫–∞: {discount_percent}%\n"
                        f"üî¢ –ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {max_uses}",
                        reply_markup=get_discounts_keyboard()
                    )
                else:
                    await message.answer(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        reply_markup=get_discounts_keyboard()
                    )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del admin_states[user_id]

            elif state == 'waiting_for_discount_code_to_delete':
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
                code = message.text.upper()

                from database import delete_discount_code
                if delete_discount_code(code):
                    await message.answer(
                        f"‚úÖ –°–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ {code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                        reply_markup=get_discounts_keyboard()
                    )
                else:
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ {code}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                        reply_markup=get_discounts_keyboard()
                    )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del admin_states[user_id]

            elif state == 'waiting_for_admin_id_to_add':
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID
                target_user_id = int(message.text)
                if add_admin(target_user_id, user_id):
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                        reply_markup=get_admins_keyboard()
                    )
                else:
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        reply_markup=get_admins_keyboard()
                    )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del admin_states[user_id]

            elif state == 'waiting_for_admin_username_to_add':
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ username
                username = message.text.strip().lstrip('@')

                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                from database import get_user_id_by_username
                target_user_id = get_user_id_by_username(username)
                if target_user_id:
                    if add_admin(target_user_id, user_id):
                        await message.answer(
                            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {target_user_id}) —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!",
                            reply_markup=get_admins_keyboard()
                        )
                    else:
                        await message.answer(
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                            f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                            reply_markup=get_admins_keyboard()
                        )
                else:
                    await message.answer(
                        f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.",
                        reply_markup=get_admins_keyboard()
                    )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del admin_states[user_id]

            elif state == 'waiting_for_admin_id_to_remove':
                # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                target_user_id = int(message.text)
                if remove_admin(target_user_id):
                    await message.answer(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
                        reply_markup=get_admins_keyboard()
                    )
                else:
                    await message.answer(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n"
                        f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —ç—Ç–æ ROOT –∞–¥–º–∏–Ω.",
                        reply_markup=get_admins_keyboard()
                    )

                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                del admin_states[user_id]

        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if user_id in admin_states:
                del admin_states[user_id]


@error_handler
async def handle_admin_panel_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not is_user_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()


@error_handler
async def handle_referral_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    with sqlite3.connect("users.db") as conn:
        conn.row_factory = dict_factory
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) as count FROM referrals")
        total_referrals = cursor.fetchone()['count']

        cursor.execute("SELECT SUM(amount) as total FROM referral_payments")
        total_payments = cursor.fetchone()['total'] or 0

        cursor.execute("""
            SELECT u.user_id, u.username, COUNT(r.user_id) as referrals_count, 
                   SUM(rp.amount) as earned_total
            FROM users u
            LEFT JOIN referrals r ON u.user_id = r.referrer_id
            LEFT JOIN referral_payments rp ON u.user_id = rp.referrer_id
            GROUP BY u.user_id
            ORDER BY earned_total DESC
            LIMIT 10
        """)
        top_referrers = cursor.fetchall()

    stats_text = (
        "üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
        f"üí∞ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {total_payments:.2f} —Ä—É–±.\n\n"
        "üèÜ <b>–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤</b>:\n"
    )

    for i, referrer in enumerate(top_referrers, 1):
        stats_text += (
            f"{i}. @{referrer['username']} (ID: {referrer['user_id']})\n"
            f"   üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrer['referrals_count']}\n"
            f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {referrer['earned_total'] or 0:.2f} —Ä—É–±.\n\n"
        )

    buttons = [[InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


@error_handler
async def handle_referral_withdrawal(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    from database import get_user

    user_id = callback.from_user.id
    user = get_user(user_id)

    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    referral_balance = user.get('referral_balance', 0)

    if referral_balance < 500:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        await callback.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 500 —Ä—É–±.", show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    from state import admin_states
    admin_states[user_id] = 'waiting_for_withdrawal_amount'

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º: {referral_balance} —Ä—É–±.):\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 500 —Ä—É–±.\n\n"
        f"–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'cancel' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="referral")]
        ])
    )
    await callback.answer()


@error_handler
async def handle_withdrawal_request(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    if not is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        parts = message.text.split()
        if len(parts) < 4:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /withdraw [ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Å—É–º–º–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]\n"
                "–ü—Ä–∏–º–µ—Ä: /withdraw 123456789 500 –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
            )
            return

        user_id = int(parts[1])
        amount = float(parts[2])
        comment = " ".join(parts[3:]) if len(parts) > 3 else "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ"

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –≤ –ë–î

        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            from shared import bot
            await bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±. –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                f"–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π."
            )
            await message.answer(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ —Å—É–º–º—ã")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@sync_error_handler
def get_settings_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    buttons = [
        [InlineKeyboardButton(text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—à–∏–±–æ–∫",
                              callback_data="admin_view_errors")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫",
                              callback_data="admin_clear_errors")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@error_handler
async def handle_admin_settings(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()


@error_handler
async def handle_view_errors(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫"""
    errors = get_recent_errors(20)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ—à–∏–±–æ–∫

    if not errors:
        errors_text = "üìù <b>–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫</b>\n\n–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö."
    else:
        errors_text = "üìù <b>–ñ—É—Ä–Ω–∞–ª –æ—à–∏–±–æ–∫</b>\n\n"
        for error in errors:
            errors_text += (
                f"üî¥ <b>ID:</b> {error['id']}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {error['timestamp']}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {error['user_id'] or 'N/A'}\n"
                f"‚ùó <b>–¢–∏–ø:</b> {error['error_type']}\n"
                f"üìÑ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error['error_message']}\n"
            )
            if error['traceback']:
                errors_text += f"üîç <b>Traceback:</b>\n<code>{error['traceback'][:200]}...</code>\n"
            errors_text += "\n" + "-"*30 + "\n\n"

    buttons = [[InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    chat_id = callback.message.chat.id
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    from state import last_bot_messages
    last_bot_messages[chat_id] = callback.message

    await callback.message.edit_text(errors_text, reply_markup=keyboard)
    await callback.answer()


@error_handler
async def handle_clear_errors(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—à–∏–±–æ–∫"""
    if clear_error_logs():
        await callback.answer("‚úÖ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", show_alert=True)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    await handle_admin_settings(callback)


@error_handler
async def handle_console_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        command_text = message.text[9:].strip()  # –£–±–∏—Ä–∞–µ–º "/console "

        if not command_text:
            await message.answer(
                "üîß <b>–ö–æ–Ω—Å–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "<code>/console stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
                "<code>/console errors</code> - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏\n"
                "<code>/console clear_errors</code> - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫\n"
                "<code>/console users count</code> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "<code>/console user [ID] info</code> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
                "<code>/console broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]</code> - —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
            )
            return

        parts = command_text.split()
        command = parts[0].lower()

        if command == "stats":
            await handle_console_stats(message)
        elif command == "errors":
            await handle_console_errors(message)
        elif command == "clear_errors":
            if clear_error_logs():
                await message.answer("‚úÖ –õ–æ–≥–∏ –æ—à–∏–±–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤")
        elif command == "users" and len(parts) > 1 and parts[1] == "count":
            await handle_console_users_count(message)
        elif command == "user" and len(parts) >= 3 and parts[2] == "info":
            try:
                user_id = int(parts[1])
                await handle_user_info(message, user_id)
            except ValueError:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
        elif command == "broadcast" and len(parts) > 1:
            await handle_console_broadcast(message, " ".join(parts[1:]))
        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /console –¥–ª—è –ø–æ–º–æ—â–∏.")

    except Exception as e:
        from error_logger import log_error
        import traceback
        log_error("ConsoleCommandError", str(e),
                  traceback.format_exc(), message.from_user.id)
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}")


@error_handler
async def handle_console_stats(message: Message):
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    from database import get_user

    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM admins")
        total_admins = cursor.fetchone()[0] + 1

        cursor.execute("SELECT SUM(balance) FROM users")
        total_balance = cursor.fetchone()[0] or 0

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–∫–æ–Ω—Å–æ–ª—å)</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {total_admins}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} —Ä—É–±."
    )

    await message.answer(stats_text)


@error_handler
async def handle_console_errors(message: Message):
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫"""
    errors = get_recent_errors(10)

    if not errors:
        await message.answer("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± –æ—à–∏–±–∫–∞—Ö.")
        return

    errors_text = "üìù <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:</b>\n\n"
    for error in errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
        errors_text += (
            f"[{error['timestamp']}] {error['error_type']}: {error['error_message'][:100]}...\n"
        )

    await message.answer(errors_text)


@error_handler
async def handle_console_users_count(message: Message):
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    with sqlite3.connect("users.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]

    await message.answer(f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")


@error_handler
async def handle_console_broadcast(message: Message, broadcast_text: str):
    """–ö–æ–Ω—Å–æ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    from database import get_all_users_ids
    from shared import bot

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with sqlite3.connect("users.db") as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users")
            user_ids = [row[0] for row in cursor.fetchall()]

        success_count = 0
        failed_count = 0

        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id, text=broadcast_text)
                success_count += 1
            except Exception:
                failed_count += 1

        await message.answer(
            f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
            f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {failed_count}"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")


@sync_error_handler
def register_admin_handlers():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–≤—ã–º–∏
    dp.message.register(handle_admin_command, Command("admin"))
    dp.message.register(handle_user_command, Command("user"))
    dp.message.register(handle_withdrawal_request, Command("withdraw"))
    dp.message.register(handle_console_command, Command("console"))

    # –ó–∞—Ç–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(
        handle_admin_callback, F.data.startswith("admin_"))

    # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(handle_admin_text_message, F.text)
