from aiogram import F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from aiogram.filters import Command
import aiohttp
import asyncio

from config import OPENROUTER_API_KEY, AI_NAME
from database import (
    init_db,
    get_user,
    create_user,
    update_user_mode,
    reset_daily_tokens_if_needed,
    increment_token_usage,
    get_subscription_info,
    log_message,
    get_last_messages,
    is_subscription_active,
    is_user_admin
)
from profile import (
    show_profile,
    deposit_balance,
    handle_exchange_referral_balance,
    handle_referral_withdrawal_request,
    show_referral_program,
    process_deposit_amount,
    process_referral_withdrawal_amount
)
from messages import get_welcome_message
from state import message_history, chat_histories, last_bot_messages
from shared import bot, dp
from admin import register_admin_handlers, handle_admin_text_message
from error_handler import error_handler, sync_error_handler
from typing import Dict


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BASE_SYSTEM_PROMPT = "–¢—ã —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

MODEL_PROMPTS = {
    "teacher": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º...",
    "content_manager": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä...",
    "editor": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤...",
    "chat": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫..."
}

MAX_HISTORY_LENGTH = 21
chat_modes: Dict[int, str] = {}   # {chat_id: "menu" | "chat"}


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
@sync_error_handler
def get_main_keyboard(user_id: int = None) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üõ† –†–µ–∂–∏–º—ã", callback_data="modes")
        ],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç", callback_data="start_chat")]
    ]
    if user_id and is_user_admin(user_id):
        buttons.append([InlineKeyboardButton(
            text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# === –°—Ç–∞—Ä—Ç ===
@error_handler
async def handle_start(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat_modes[chat_id] = "menu"

    try:
        await message.delete()
    except:
        pass

    if not get_user(user_id):
        create_user(user_id, message.from_user.username,
                    message.from_user.full_name)

    welcome_text = get_welcome_message(user_id)
    keyboard = get_main_keyboard(user_id)

    msg = await message.answer(welcome_text, reply_markup=keyboard)
    message_history[chat_id] = {"user_msgs": [], "bot_msgs": [msg]}
    last_bot_messages[chat_id] = msg


# === –†–µ–∂–∏–º—ã ===
@error_handler
async def handle_modes(callback: CallbackQuery):
    await callback.message.edit_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
                                  callback_data="mode_teacher")],
            [InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä",
                                  callback_data="mode_content_manager")],
            [InlineKeyboardButton(text="‚úçÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä",
                                  callback_data="mode_editor")],
            [InlineKeyboardButton(text="üí¨ –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç",
                                  callback_data="mode_chat")],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()


@error_handler
async def handle_set_mode(callback: CallbackQuery):
    user_id = callback.from_user.id
    mode = callback.data.replace("mode_", "")
    update_user_mode(user_id, mode)
    await callback.answer(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {mode}")


# === –ß–∞—Ç ===
@error_handler
async def handle_start_chat(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    chat_modes[chat_id] = "chat"

    try:
        await callback.message.delete()
    except:
        pass

    pinned = await bot.send_message(
        chat_id,
        "üí¨ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —á–∞—Ç–µ.\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
    try:
        await bot.pin_chat_message(chat_id, pinned.message_id, disable_notification=True)
    except:
        pass

    await callback.answer()


@error_handler
async def handle_back_to_main(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    chat_modes[chat_id] = "menu"

    try:
        await bot.unpin_all_chat_messages(chat_id)
    except:
        pass

    welcome_text = get_welcome_message(user_id)
    keyboard = get_main_keyboard(user_id)

    msg = await callback.message.answer(welcome_text, reply_markup=keyboard)
    message_history[chat_id] = {"user_msgs": [], "bot_msgs": [msg]}
    last_bot_messages[chat_id] = msg

    try:
        await callback.message.delete()
    except:
        pass

    await callback.answer()


# === –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ ===
@error_handler
async def handle_message(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
    if chat_modes.get(chat_id) != "chat":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)
        from state import user_states
        if user_id in user_states and user_states[user_id] in [
            "waiting_for_amount",           # –û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            "waiting_for_withdrawal_amount",  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
            'waiting_for_admin_id_to_add',
            'waiting_for_admin_username_to_add',
            'waiting_for_admin_id_to_remove',
            'waiting_for_discount_params',
            'waiting_for_discount_code_to_delete'
        ]:
            # –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            from profile import process_deposit_amount, process_referral_withdrawal_amount
            from admin import handle_admin_text_message

            if user_states[user_id] == "waiting_for_amount":
                await process_deposit_amount(message)
            elif user_states[user_id] == "waiting_for_withdrawal_amount":
                await process_referral_withdrawal_amount(message)
            else:
                await handle_admin_text_message(message)
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–µ–º—ã–π –≤–≤–æ–¥, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await message.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_msg = await message.answer(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å Zenith –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —á–∞—Ç–∞.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí¨ –ß–∞—Ç —Å Zenith", callback_data="start_chat")]
            ])
        )

        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            await info_msg.delete()
        except:
            pass

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –∏ –∏—â–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏
            async for msg in bot.get_chat_history(chat_id, limit=5):
                if msg.text and "–∑–∞–∫—Ä–µ–ø–∏–ª(–∞) —É–¥–∞–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in msg.text.lower():
                    await msg.delete()
                    break
        except:
            pass

        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—â–µ–Ω–∏—è —Å AI (–≤–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞)
    await message.answer("‚ö° –ß–∞—Ç —Å –ò–ò –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –¥–æ–±–∞–≤—å —Å—é–¥–∞ –ª–æ–≥–∏–∫—É –æ–±—â–µ–Ω–∏—è.")


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
@sync_error_handler
def register_handlers():
    dp.message.register(handle_start, Command("start"))
    dp.message.register(handle_message, F.text & ~F.text.startswith("/"))

    dp.callback_query.register(handle_modes, F.data == "modes")
    dp.callback_query.register(handle_set_mode, F.data.startswith("mode_"))
    dp.callback_query.register(handle_start_chat, F.data == "start_chat")
    dp.callback_query.register(handle_back_to_main, F.data == "back_to_main")

    # profile.py –æ–±—ë—Ä—Ç–∫–∏ —Å bot_instance
    dp.callback_query.register(show_profile, F.data == "profile")
    dp.callback_query.register(deposit_balance, F.data == "deposit")
    dp.callback_query.register(
        handle_exchange_referral_balance, F.data == "exchange_referral_balance")
    dp.callback_query.register(
        handle_referral_withdrawal_request, F.data == "referral_withdrawal")
    dp.callback_query.register(show_referral_program, F.data == "referral")
    # subscriptions.py handlers
    from subscriptions import show_subscriptions_menu, handle_subscription_selection, handle_back_to_profile
    dp.callback_query.register(
        show_subscriptions_menu, F.data == "subscriptions")
    dp.callback_query.register(
        handle_subscription_selection, F.data.startswith("sub_"))
    dp.callback_query.register(
        handle_back_to_profile, F.data == "back_to_profile")


# === –ó–∞–ø—É—Å–∫ ===
@error_handler
async def main():
    init_db()
    register_handlers()
    register_admin_handlers()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
