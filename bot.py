from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    BotCommand
)
from aiogram.filters import Command
import aiohttp
import asyncio

from config import API_TOKEN, OPENROUTER_API_KEY, AI_NAME
from database import (
    init_db,
    get_user,
    create_user,
    update_user_mode,
    reset_daily_tokens_if_needed,
    increment_token_usage,
    get_subscription_info,
    log_message,
    get_last_messages,
    is_subscription_active,
    is_user_admin
)
from profile import (
    show_profile,
    deposit_balance,
    get_profile_keyboard,
    handle_exchange_referral_balance,
    handle_referral_withdrawal_request,
    process_deposit_amount,
    process_referral_withdrawal_amount,
    show_referral_program,
    payment_checks
)
from messages import (
    get_welcome_message,
    get_profile_text,
    get_return_to_main_message,
    get_subscription_info_text
)
from state import message_history, chat_histories, last_bot_messages, admin_states, user_states
from shared import bot, dp
from admin import register_admin_handlers
from error_handler import error_handler, sync_error_handler
from typing import Optional


# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BASE_SYSTEM_PROMPT = "–¢—ã —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

MODEL_PROMPTS = {
    "teacher": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º...",
    "content_manager": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä...",
    "editor": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤...",
    "chat": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫..."
}

MAX_HISTORY_LENGTH = 21
chat_modes = {}   # {chat_id: "menu" | "chat"}


# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
def get_main_keyboard(user_id: int = None) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            InlineKeyboardButton(text="üõ† –†–µ–∂–∏–º—ã", callback_data="modes")
        ],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç", callback_data="start_chat")]
    ]
    if user_id and is_user_admin(user_id):
        buttons.append([InlineKeyboardButton(
            text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# === –°—Ç–∞—Ä—Ç ===
@error_handler
async def handle_start(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat_modes[chat_id] = "menu"

    try:
        await message.delete()
    except:
        pass

    if not get_user(user_id):
        create_user(user_id, message.from_user.username,
                    message.from_user.full_name)

    welcome_text = get_welcome_message(user_id)
    keyboard = get_main_keyboard(user_id)

    msg = await message.answer(welcome_text, reply_markup=keyboard)
    message_history[chat_id] = {"user_msgs": [], "bot_msgs": [msg]}
    last_bot_messages[chat_id] = msg


# === –í—Ö–æ–¥ –≤ —á–∞—Ç —Å –ò–ò ===
@error_handler
async def handle_start_chat(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    chat_modes[chat_id] = "chat"

    # –£–±–∏—Ä–∞–µ–º –º–µ–Ω—é
    try:
        await callback.message.delete()
    except:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–∫—É
    pinned = await bot.send_message(
        chat_id,
        "üí¨ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–º —á–∞—Ç–µ.\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –í –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
    try:
        await bot.pin_chat_message(chat_id, pinned.message_id)
    except:
        pass

    await callback.answer()


# === –í—ã—Ö–æ–¥ –∏–∑ —á–∞—Ç–∞ ===
@error_handler
async def handle_back_to_main(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    chat_modes[chat_id] = "menu"

    try:
        await bot.unpin_all_chat_messages(chat_id)
    except:
        pass

    welcome_text = get_welcome_message(user_id)
    keyboard = get_main_keyboard(user_id)

    msg = await callback.message.answer(welcome_text, reply_markup=keyboard)
    message_history[chat_id] = {"user_msgs": [], "bot_msgs": [msg]}
    last_bot_messages[chat_id] = msg

    try:
        await callback.message.delete()
    except:
        pass

    await callback.answer()


# === –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@error_handler
async def handle_message(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    if chat_modes.get(chat_id) != "chat":
        return  # –≤ –º–µ–Ω—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    if chat_id not in message_history:
        message_history[chat_id] = {"user_msgs": [], "bot_msgs": []}
    message_history[chat_id]["user_msgs"].append(message)
    log_message(user_id, "user", message.text)

    reset_daily_tokens_if_needed(user_id)
    user = get_user(user_id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    if "mode" not in user:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        return

    sub_info = get_subscription_info(user_id)
    tokens_needed = len(message.text.split()) * 2
    if sub_info["tokens_used_today"] + tokens_needed > get_daily_limit(sub_info["subscription_type"]):
        await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
        return

    increment_token_usage(user_id, tokens_needed)

    # –ò—Å—Ç–æ—Ä–∏—è
    mode = user.get("mode", "chat")
    system_prompt = MODEL_PROMPTS.get(mode, BASE_SYSTEM_PROMPT)

    if chat_id not in chat_histories:
        chat_histories[chat_id] = [
            {"role": "system", "content": system_prompt}]
        past = get_last_messages(user_id, limit=20)
        for msg in past:
            chat_histories[chat_id].append(
                {"role": msg["role"], "content": msg["message"]})

    chat_histories[chat_id].append({"role": "user", "content": message.text})

    if len(chat_histories[chat_id]) > MAX_HISTORY_LENGTH:
        chat_histories[chat_id] = [chat_histories[chat_id][0]] + \
            chat_histories[chat_id][-MAX_HISTORY_LENGTH + 1:]

    # –ó–∞–ø—Ä–æ—Å –∫ AI
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {"model": AI_NAME, "messages": chat_histories[chat_id]}
            async with session.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    answer = data["choices"][0]["message"]["content"]
                    chat_histories[chat_id].append(
                        {"role": "assistant", "content": answer})
                    log_message(user_id, "assistant", answer)
                    await message.answer(answer)
                else:
                    error = await response.text()
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {error}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# === –õ–∏–º–∏—Ç—ã ===
def get_daily_limit(sub_type: str) -> int:
    limits = {"free": 20, "tier1": 20000, "tier2": 40000, "tier3": 100000}
    return limits.get(sub_type, 20)


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
def register_handlers():
    dp.message.register(handle_start, Command("start"))
    dp.message.register(handle_message, F.text & ~F.text.startswith("/"))

    dp.callback_query.register(handle_start_chat, F.data == "start_chat")
    dp.callback_query.register(handle_back_to_main, F.data == "back_to_main")
    dp.callback_query.register(show_profile, F.data == "profile")
    dp.callback_query.register(deposit_balance, F.data == "deposit")
    dp.callback_query.register(
        handle_exchange_referral_balance, F.data == "exchange_referral_balance")
    dp.callback_query.register(
        handle_referral_withdrawal_request, F.data == "referral_withdrawal")
    dp.callback_query.register(show_referral_program, F.data == "referral")


# === –ó–∞–ø—É—Å–∫ ===
async def main():
    init_db()
    register_handlers()
    register_admin_handlers()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
