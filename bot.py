from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, BotCommand
from aiogram.filters import Command
from subscriptions import show_subscriptions_menu, handle_subscription_selection, handle_back_to_profile
from config import API_TOKEN, OPENROUTER_API_KEY
from database import (
    init_db,
    get_user,
    create_user,
    update_balance,
    update_user_mode,
    reset_daily_tokens_if_needed,
    increment_token_usage,
    get_subscription_info,
    log_message,
    get_last_messages, 
    is_subscription_active,
    get_user_active_discount, 
    mark_discount_as_used,
    is_user_admin
)
from profile import show_profile, deposit_balance, get_profile_keyboard, show_referral_program
from messages import get_welcome_message, get_profile_text, get_return_to_main_message, get_subscription_info_text
import aiohttp
import asyncio
from aiogram.types import BotCommand
from state import last_bot_messages, message_history, chat_histories, admin_states
from functools import partial
from shared import bot, dp
import logging
from admin import register_admin_handlers

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_modes = {}
last_bot_messages = {}  # {chat_id: {'user_msgs': [], 'bot_msgs': []}}
profile_message_ids = {}
chat_modes = {}

init_db()

async def set_main_menu(bot: Bot):
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    commands = [
        BotCommand(command='start', description='–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        BotCommand(command='profile', description='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'),
        BotCommand(command='mode', description='–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'),
        BotCommand(command='discount', description='–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥')
    ]
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–±—É–¥—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    admin_commands = commands.copy()
    admin_commands.extend([
        BotCommand(command='admin', description='–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'),
        BotCommand(command='user', description='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
    ])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    await bot.set_my_commands(commands)


#logging.basicConfig(level=logging.INFO)
BASE_SYSTEM_PROMPT = "–¢—ã —É–º–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."

MODEL_PROMPTS = {
    "teacher": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π —É—á–∏—Ç–µ–ª—å —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º...",
    "content_manager": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä...",
    "editor": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤...",
    "chat": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫..."
}

MODEL = "deepseek/deepseek-chat-v3-0324:free"
MAX_HISTORY_LENGTH = 21

def get_models_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–£—á–∏—Ç–µ–ª—å", callback_data="mode_teacher")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä", callback_data="mode_content_manager")],
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–æ—Ä", callback_data="mode_editor")],
        [InlineKeyboardButton(text="–ß–∞—Ç–æ–≤–æ–¥", callback_data="mode_chat")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_main_keyboard(user_id: int = None) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
         InlineKeyboardButton(text="üõ† –†–µ–∂–∏–º—ã", callback_data="modes")]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if user_id and is_user_admin(user_id):
        buttons.append([InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def cleanup_chat(chat_id: int):
    try:
        if chat_id in message_history:
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            for msg in message_history[chat_id]['bot_msgs']:
                try:
                    if msg and hasattr(msg, 'message_id'):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ None –∏ –Ω–∞–ª–∏—á–∏–µ message_id
                        # –ù–µ —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                        if not (hasattr(msg, 'text') and msg.text and 
                               ("ü§ñ Zenith ‚Äî –ª—É—á—à–∏–π –¥—Ä—É–≥" in msg.text or 
                                "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in msg.text or
                                "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏" in msg.text or
                                "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏" in msg.text or
                                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã" in msg.text or
                                "üéü –°–∫–∏–¥–æ—á–Ω—ã–µ –∫–æ–¥—ã" in msg.text or
                                "üéü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏" in msg.text)):
                            await bot.delete_message(chat_id, msg.message_id)
                except:
                    pass
            
            message_history[chat_id]['bot_msgs'] = []
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}")

async def handle_start(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat_modes[chat_id] = 'inline'
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    referrer_id = None
    if len(message.text.split()) > 1 and message.text.split()[1].startswith('ref'):
        try:
            referrer_id = int(message.text.split()[1][3:])
            if referrer_id != user_id:  # –ù–µ–ª—å–∑—è —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —Å–µ–±—è
                from database import add_referral
                add_referral(user_id, referrer_id)
        except ValueError:
            pass

    if not get_user(user_id):
        create_user(user_id, message.from_user.username, message.from_user.full_name)

    await cleanup_chat(chat_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î
    history = get_last_messages(user_id, limit=20)
    system_prompt = MODEL_PROMPTS.get("chat", BASE_SYSTEM_PROMPT)

    chat_histories[chat_id] = [{"role": "system", "content": system_prompt}]
    for msg in history:
        chat_histories[chat_id].append({"role": msg["role"], "content": msg["message"]})

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = get_welcome_message(user_id)
    welcome_keyboard = get_main_keyboard(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    last_msg = last_bot_messages.get(chat_id)
    
    try:
        if (last_msg and 
            hasattr(last_msg, 'text') and 
            last_msg.text and 
            "ü§ñ Zenith ‚Äî –ª—É—á—à–∏–π –¥—Ä—É–≥" in last_msg.text):
            # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await last_msg.delete()
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if last_msg and last_msg != message:
            try:
                await last_msg.delete()
            except:
                pass
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        msg = await message.answer(
            welcome_text,
            reply_markup=welcome_keyboard
        )
        
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        last_bot_messages[chat_id] = msg
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def handle_profile_command(message: Message):
    await cleanup_chat(message.chat.id)
    
    user = get_user(message.from_user.id)
    if not user:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        message_history[message.chat.id]['bot_msgs'].append(msg)
        return
    
    try:
        await message.delete()
    except Exception:
        pass

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = get_profile_text(user)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    sub_text = get_subscription_info_text(user)
    full_text = f"{profile_text}\n\n{sub_text}"

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    if user_id in profile_message_ids:
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=profile_message_ids[user_id],
                text=full_text,
                reply_markup=get_profile_keyboard(user_id)
            )
            return
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ–± ID —Å–æ–æ–±—â–µ–Ω–∏—è
            if user_id in profile_message_ids:
                del profile_message_ids[user_id]
    
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer(
        text=full_text,
        reply_markup=get_profile_keyboard(user_id)
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    profile_message_ids[user_id] = msg.message_id
    message_history[chat_id]['bot_msgs'].append(msg)

async def handle_message(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.text.startswith('/'):
        return
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π
    chat_modes[chat_id] = 'dialog'
    
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç user_id={user_id}, admin_states={admin_states}")  
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
    message_history[chat_id]['user_msgs'].append(message)

    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò
    if user_id in admin_states:
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {admin_states[user_id]}, –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É")   
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∞–¥–º–∏–Ω—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º —Å –Ω–∏–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    last_msg = last_bot_messages.get(chat_id) if chat_id in last_bot_messages else None
    is_in_admin_panel = False
    
    if last_msg and hasattr(last_msg, 'text') and last_msg.text:
        admin_texts = [
            "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", 
            "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏",
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã",
            "üéü –°–∫–∏–¥–æ—á–Ω—ã–µ –∫–æ–¥—ã",
            "üéü –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∞–º–∏"
        ]
        is_in_admin_panel = any(admin_text in last_msg.text for admin_text in admin_texts)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏, –Ω–µ –æ—á–∏—â–∞–µ–º —á–∞—Ç
    if not is_in_admin_panel:
        await cleanup_chat(chat_id)
    
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò –æ—Ç user_id={user_id}")
    
    log_message(user_id, "user", message.text)  # üíæ –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    has_welcome_message = False
    
    if last_msg and hasattr(last_msg, 'text') and last_msg.text:
        has_welcome_message = "ü§ñ Zenith ‚Äî –ª—É—á—à–∏–π –¥—Ä—É–≥" in last_msg.text
    
    if not has_welcome_message:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        msg = await message.answer(
            text=get_return_to_main_message(),
            reply_markup=keyboard
        )
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        if chat_id not in last_bot_messages:
            last_bot_messages[chat_id] = msg
        return

    reset_daily_tokens_if_needed(user_id)
    user = get_user(user_id)
    if not user:
        msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        return
    
    if 'mode' not in user:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        return

    sub_info = get_subscription_info(user_id)
    tokens_needed = len(message.text.split()) * 2
    if sub_info['tokens_used_today'] + tokens_needed > get_daily_limit(sub_info['subscription_type']):
        msg = await message.answer("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!")
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        return

    increment_token_usage(user_id, tokens_needed)
    await message.chat.do("typing")

    try:
        mode = user.get('mode', 'chat')
        system_prompt = MODEL_PROMPTS.get(mode, BASE_SYSTEM_PROMPT)

        if chat_id not in chat_histories:
            chat_histories[chat_id] = [{"role": "system", "content": system_prompt}]
            past = get_last_messages(user_id, limit=20)
            for msg in past:
                chat_histories[chat_id].append({"role": msg["role"], "content": msg["message"]})

        chat_histories[chat_id].append({"role": "user", "content": message.text})

        if len(chat_histories[chat_id]) > MAX_HISTORY_LENGTH:
            chat_histories[chat_id] = [chat_histories[chat_id][0]] + chat_histories[chat_id][-MAX_HISTORY_LENGTH+1:]

        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            }

            payload = {
                "model": MODEL,
                "messages": chat_histories[chat_id]
            }

            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    answer = data['choices'][0]['message']['content']
                    chat_histories[chat_id].append({"role": "assistant", "content": answer})
                    log_message(user_id, "assistant", answer)  # üíæ –ª–æ–≥ –±–æ—Ç–∞
                    msg = await message.answer(answer)
                    message_history[chat_id]['bot_msgs'].append(msg)
                else:
                    error = await response.text()
                    msg = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error}")
                    message_history[chat_id]['bot_msgs'].append(msg)

    except Exception as e:
        msg = await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        
async def handle_modes_callback(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await cleanup_chat(chat_id)
    
    msg = await callback.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_models_keyboard()
    )
    
    if chat_id not in message_history:
        message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
    message_history[chat_id]['bot_msgs'].append(msg)
    
    await callback.answer()

async def handle_profile_callback(callback: CallbackQuery):
    try:
        await callback.answer()
        chat_id = callback.message.chat.id
        user_id = callback.from_user.id
        
        # –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        user = get_user(user_id)
        if not user:
            # –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–¥–ø–∏—Å–∫–∏
        try:
            profile_text = get_profile_text(user)
            sub_text = get_subscription_info_text(user)
            full_text = f"{profile_text}\n\n{sub_text}"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
            full_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            keyboard = get_profile_keyboard(user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                text=full_text,
                reply_markup=keyboard
            )
            profile_message_ids[user_id] = callback.message.message_id
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_profile_callback: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_back_to_main(callback: CallbackQuery):
    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()
        
        chat_id = callback.message.chat.id
        chat_modes[chat_id] = 'inline'
        user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = get_welcome_message(user_id)
        welcome_keyboard = get_main_keyboard(user_id)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.edit_text(
                welcome_text,
                reply_markup=welcome_keyboard
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except:
                pass
            
            new_msg = await callback.message.answer(
                welcome_text,
                reply_markup=welcome_keyboard
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            if chat_id not in message_history:
                message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
            message_history[chat_id]['bot_msgs'].append(new_msg)
            last_bot_messages[chat_id] = new_msg

        await cleanup_chat(chat_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_main: {e}")

def get_daily_limit(sub_type: str) -> int:
    limits = {
        'free': 20,
        'tier1': 20000,
        'tier2': 40000,
        'tier3': 100000
    }
    return limits.get(sub_type, 20)

async def handle_mode_selection(callback: CallbackQuery):
    try:
        await callback.answer()
        chat_id = callback.message.chat.id
        mode = callback.data.replace("mode_", "")
        user_id = callback.from_user.id

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in message_history[chat_id]['bot_msgs']:
            try:
                await bot.delete_message(chat_id, msg.message_id)
            except:
                pass

        update_user_mode(user_id, mode)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
        mode_msg = await callback.message.answer(
            f"‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{mode}</b>"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å)
        last_msg = last_bot_messages.get(chat_id)
        if (last_msg and 
            hasattr(last_msg, 'text') and 
            last_msg.text and 
            "ü§ñ Zenith ‚Äî –ª—É—á—à–∏–π –¥—Ä—É–≥" in last_msg.text):
            try:
                await last_msg.delete()
            except:
                pass

        menu_msg = await callback.message.answer(
            get_welcome_message(user_id),
            reply_markup=get_main_keyboard(user_id)
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        message_history[chat_id]['bot_msgs'] = [mode_msg, menu_msg]
        last_bot_messages[chat_id] = menu_msg

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = MODEL_PROMPTS.get(mode, BASE_SYSTEM_PROMPT)
        chat_histories[chat_id] = [{"role": "system", "content": system_prompt}]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_mode_selection: {e}")

async def handle_admin_panel_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    from admin import get_admin_keyboard
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if not is_user_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

async def handle_discount_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /discount"""
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /discount [–∫–æ–¥]")
            return
        
        code = parts[1].upper()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_discount = get_user_active_discount(message.from_user.id)
        if existing_discount:
            await message.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–∫–∏–¥–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—ë –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–∏–¥–∫–µ
        from database import get_discount_code
        discount = get_discount_code(code)
        
        if not discount:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –∫–æ–¥ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if discount['used_count'] >= discount['max_uses']:
            await message.answer("‚ùå –≠—Ç–æ—Ç —Å–∫–∏–¥–æ—á–Ω—ã–π –∫–æ–¥ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        from database import apply_discount_to_user
        if apply_discount_to_user(message.from_user.id, code):
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞
            from database import use_discount_code
            use_discount_code(code)
            
            await message.answer(
                f"‚úÖ –°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!\n\n"
                f"üé´ –ö–æ–¥: {code}\n"
                f"üìä –°–∫–∏–¥–∫–∞: {discount['discount_percent']}%\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏."
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–∫–∏–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_mode_command(message: Message):
    await cleanup_chat(message.chat.id)
    
    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=get_models_keyboard()
    )

    try:
        await message.delete()
    except Exception:
        pass

    message_history[message.chat.id]['bot_msgs'].append(msg)

async def handle_admin_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_user_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    chat_id = message.chat.id
    last_msg = last_bot_messages.get(chat_id)
    
    welcome_text = "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    buttons = [
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="admin_manage_admins")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
        [InlineKeyboardButton(text="üéü –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if (last_msg and 
        hasattr(last_msg, 'text') and 
        last_msg.text and 
        "üéõ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" in last_msg.text):
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await last_msg.edit_text(welcome_text, reply_markup=keyboard)
            try:
                await message.delete()
            except:
                pass
            return
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await last_msg.delete()
            except:
                pass
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π
    try:
        await message.delete()
    except Exception:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        msg = await message.answer(welcome_text, reply_markup=keyboard)
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        message_history[chat_id]['bot_msgs'].append(msg)
        last_bot_messages[chat_id] = msg
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def handle_inline_callback(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    user_id = callback.from_user.id
    
    # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º –±—ã–ª –¥–∏–∞–ª–æ–≥–æ–≤—ã–π, –æ—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
    if chat_modes.get(chat_id) == 'dialog':
        if chat_id in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
    chat_modes[chat_id] = 'inline'
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞, –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–¥–º–∏–Ω—Å–∫–æ–º—É –º–æ–¥—É–ª—é
    if callback.data.startswith("admin_"):
        from admin import handle_admin_callback
        return await handle_admin_callback(callback)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    last_msg = last_bot_messages.get(chat_id)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–Ω–æ –≤ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    if (last_msg and 
        hasattr(last_msg, 'message_id') and 
        chat_modes.get(chat_id) == 'inline'):
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç callback.data
            if callback.data == "profile":
                user = get_user(user_id)
                new_text = get_profile_text(user) if user else "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                new_keyboard = get_profile_keyboard(user_id)
            elif callback.data == "modes":
                new_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:"
                new_keyboard = get_models_keyboard()
            elif callback.data == "back_to_main":
                new_text = get_welcome_message(user_id)
                new_keyboard = get_main_keyboard(user_id)
            elif callback.data == "admin_panel":
                from admin import handle_admin_panel_callback
                return await handle_admin_panel_callback(callback)
            elif callback.data == "subscriptions":
                # –î–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                return await show_subscriptions_menu(callback)
            elif callback.data == "deposit":
                # –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                return await deposit_balance(callback)
            elif callback.data.startswith("mode_"):
                # –î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                return await handle_mode_selection(callback)
            elif callback.data == "back_to_profile":
                # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                return await handle_back_to_profile(callback)
            elif callback.data == "referral":
                # –î–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                from profile import show_referral_program
                return await show_referral_program(callback)
            else:
                # –ï—Å–ª–∏ callback –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –ø–µ—Ä–µ–¥–∞–µ–º –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
                return await handle_other_callbacks(callback)
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                current_text = last_msg.text if hasattr(last_msg, 'text') else ""
                if current_text != new_text:
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=last_msg.message_id,
                        text=new_text,
                        reply_markup=new_keyboard
                    )
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    await bot.edit_message_reply_markup(
                        chat_id=chat_id,
                        message_id=last_msg.message_id,
                        reply_markup=new_keyboard
                    )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await last_msg.delete()
                except:
                    pass
                new_msg = await callback.message.answer(
                    text=new_text,
                    reply_markup=new_keyboard
                )
                message_history[chat_id]['bot_msgs'].append(new_msg)
                last_bot_messages[chat_id] = new_msg
            
            await callback.answer()
            return
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    try:
        if callback.data == "profile":
            await handle_profile_callback(callback)
        elif callback.data == "modes":
            await handle_modes_callback(callback)
        elif callback.data == "back_to_main":
            await handle_back_to_main(callback)
        elif callback.data == "admin_panel":
            from admin import handle_admin_panel_callback
            await handle_admin_panel_callback(callback)
        elif callback.data == "subscriptions":
            await show_subscriptions_menu(callback)
        elif callback.data == "deposit":
            await deposit_balance(callback)
        elif callback.data.startswith("mode_"):
            await handle_mode_selection(callback)
        elif callback.data.startswith("sub_"):
            await handle_subscription_selection(callback)
        elif callback.data == "back_to_profile":
            await handle_back_to_profile(callback)
        elif callback.data == "referral":
            from profile import show_referral_program
            await show_referral_program(callback)
        else:
            await handle_other_callbacks(callback)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_inline_callback: {e}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            pass

async def handle_other_callbacks(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback'–æ–≤"""
    try:
        print(f"Unhandled callback data: {callback.data}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å sub_
        if callback.data.startswith("sub_"):
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {callback.data}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–¥–µ—Å—å
            from subscriptions import handle_subscription_selection
            return await handle_subscription_selection(callback)
            
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_other_callbacks: {e}")
        try:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            pass
        
def register_handlers():
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(handle_start, Command("start"))
    dp.message.register(handle_profile_command, Command("profile"))
    dp.message.register(handle_mode_command, Command("mode"))  
    dp.message.register(handle_discount_command, Command("discount"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.message.register(handle_message, F.text)
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(handle_inline_callback)
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dp.callback_query.register(handle_modes_callback, F.data == "modes")
    dp.callback_query.register(handle_profile_callback, F.data == "profile")
    dp.callback_query.register(deposit_balance, F.data == "deposit")
    dp.callback_query.register(handle_mode_selection, F.data.startswith("mode_"))
    dp.callback_query.register(handle_back_to_main, F.data == "back_to_main")
    dp.callback_query.register(show_subscriptions_menu, F.data == "subscriptions")
    dp.callback_query.register(handle_subscription_selection, F.data.startswith("sub_"))
    dp.callback_query.register(handle_back_to_profile, F.data == "back_to_profile")
    dp.callback_query.register(handle_admin_panel_callback, F.data == "admin_panel")
    dp.callback_query.register(show_referral_program, F.data == "referral")
    dp.callback_query.register(handle_exchange_referral_balance, F.data == "exchange_referral_balance")

async def main():
    init_db()
    register_handlers()
    register_admin_handlers()
    await set_main_menu(bot)
    await dp.start_polling(bot)
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())