import traceback
import asyncio
from functools import wraps
from error_logger import log_error
from config import ROOT_ADMIN_ID
from shared import bot


def error_handler(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if "message is not modified" in str(e).lower():
                # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º callback'–æ–º –∏ –≤—ã—Ö–æ–¥–∏–º
                for arg in args:
                    if hasattr(arg, 'answer'):
                        try:
                            await arg.answer()
                        except:
                            pass
                        break
                return  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —ç—Ç—É "–æ—à–∏–±–∫—É"

            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
            error_type = type(e).__name__
            error_message = str(e)
            tb = traceback.format_exc()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            user_id = None
            for arg in args:
                if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                    user_id = arg.from_user.id
                    break

            log_error(error_type, error_message, tb, user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
            if ROOT_ADMIN_ID:
                try:
                    admin_message = (
                        f"üî¥ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
                        f"‚ùå <b>–§—É–Ω–∫—Ü–∏—è:</b> {func.__name__}\n"
                        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id or 'N/A'}\n"
                        f"‚ùó <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}\n"
                        f"üìÑ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message[:200]}...\n"
                        f"üîç <b>Traceback:</b>\n<code>{tb[:500]}...</code>"
                    )
                    await bot.send_message(ROOT_ADMIN_ID, admin_message)
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                msg_obj = None
                for arg in args:
                    if hasattr(arg, 'message'):
                        msg_obj = arg
                        break
                    elif hasattr(arg, 'answer'):
                        msg_obj = arg
                        break

                if msg_obj:
                    if hasattr(msg_obj, 'answer'):
                        await msg_obj.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
                    elif hasattr(msg_obj, 'edit_text'):
                        await msg_obj.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    return wrapper


def sync_error_handler(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            error_type = type(e).__name__
            error_message = str(e)
            tb = traceback.format_exc()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        user_id = None
        for arg in args:
            if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                user_id = arg.from_user.id
                break

        log_error(error_type, error_message, tb, user_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º asyncio.create_task)
        if ROOT_ADMIN_ID:
            try:
                admin_message = (
                    f"üî¥ <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
                    f"‚ùå <b>–§—É–Ω–∫—Ü–∏—è:</b> {func.__name__}\n"
                    f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id or 'N/A'}\n"
                    f"‚ùó <b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b> {error_type}\n"
                    f"üìÑ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message[:200]}...\n"
                    f"üîç <b>Traceback:</b>\n<code>{tb[:500]}...</code>"
                )
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º create_task –≤–º–µ—Å—Ç–æ threading.Thread
                asyncio.create_task(bot.send_message(
                    ROOT_ADMIN_ID, admin_message))
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    return wrapper
