from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram import F
from database import update_purchase_balance, update_referral_balance, transfer_referral_to_purchase_balance, get_user
from shared import bot, dp
from messages import get_profile_text, get_subscription_info_text
from datetime import datetime
from config import ROOT_ADMIN_ID, TIMEZONE
from error_handler import error_handler, sync_error_handler
import re
import asyncio

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
MIN_REFERRAL_WITHDRAWAL = 10

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
payment_checks = {}  # {payment_id: {user_id: int, message_id: int, chat_id: int}}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
active_user_messages = {}  # {user_id: message_id}


@sync_error_handler
def get_profile_keyboard(user_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                              callback_data="deposit")],
        [InlineKeyboardButton(
            text="üíé –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
                              callback_data="referral")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@error_handler
async def show_referral_program(callback: CallbackQuery):
    from messages import get_referral_message
    from database import get_user

    try:
        user = get_user(callback.from_user.id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        referral_balance = user.get('referral_balance', 0)

        keyboard_buttons = []

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–º–µ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
        if referral_balance > 0:
            keyboard_buttons.append([InlineKeyboardButton(
                text="üí± –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data="exchange_referral_balance")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)
        keyboard_buttons.append([InlineKeyboardButton(
            text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="referral_withdrawal")])

        keyboard_buttons.append([InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])

        msg = await callback.message.edit_text(
            text=get_referral_message(callback.from_user.id),
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[callback.from_user.id] = msg.message_id

        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_referral_program: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")


@error_handler
async def handle_exchange_referral_balance(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–º–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫"""
    from database import get_user, transfer_referral_to_purchase_balance
    from messages import get_referral_message

    user_id = callback.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    if user_id in active_user_messages and active_user_messages[user_id] != callback.message.message_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    try:
        user = get_user(user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        referral_balance = user.get('referral_balance', 0)

        if referral_balance <= 0:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–±–º–µ–Ω–∞", show_alert=True)
            return

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫
        if transfer_referral_to_purchase_balance(user_id, referral_balance):
            await callback.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {referral_balance} —Ä—É–±. —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫!", show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
            user = get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            keyboard_buttons = []
            if referral_balance > 0:
                keyboard_buttons.append([InlineKeyboardButton(
                    text="üí± –û–±–º–µ–Ω—è—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å –ø–æ–∫—É–ø–æ–∫", callback_data="exchange_referral_balance")])
            keyboard_buttons.append([InlineKeyboardButton(
                text="üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤", callback_data="referral_withdrawal")])
            keyboard_buttons.append([InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])

            msg = await callback.message.edit_text(
                text=get_referral_message(user_id),
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=keyboard_buttons)
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            active_user_messages[user_id] = msg.message_id
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –±–∞–ª–∞–Ω—Å–∞", show_alert=True)


@error_handler
async def show_clean_profile_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∏—Å—Ç–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    if callback.from_user.id in active_user_messages and active_user_messages[callback.from_user.id] != callback.message.message_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    user = get_user(callback.from_user.id)
    if not user:
        try:
            msg = await callback.message.edit_text(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            active_user_messages[callback.from_user.id] = msg.message_id
        except Exception:
            msg = await callback.message.answer(
                "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
            )
            try:
                await callback.message.delete()
            except:
                pass
            active_user_messages[callback.from_user.id] = msg.message_id
        await callback.answer()
        return

    try:
        profile_text = get_profile_text(user)
        sub_text = get_subscription_info_text(user)
        full_text = f"{profile_text}\n\n{sub_text}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        full_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"

    try:
        keyboard = get_profile_keyboard(callback.from_user.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        msg = await callback.message.edit_text(
            text=full_text,
            reply_markup=keyboard
        )
        active_user_messages[callback.from_user.id] = msg.message_id
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await callback.message.answer(
            text=full_text,
            reply_markup=keyboard
        )
        try:
            await callback.message.delete()
        except:
            pass
        active_user_messages[callback.from_user.id] = msg.message_id

    await callback.answer()


@error_handler
async def show_profile(callback: CallbackQuery):
    await show_clean_profile_menu(callback)


@error_handler
async def deposit_balance(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    if callback.from_user.id in active_user_messages and active_user_messages[callback.from_user.id] != callback.message.message_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    user_id = callback.from_user.id
    user_states[user_id] = "waiting_for_amount"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    from bot import message_history, last_bot_messages
    # –û—á–∏—â–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    try:
        msg = await callback.message.edit_text(
            "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±.):\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile")]
            ])
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_id = callback.message.chat.id
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–µ–≥–∫–æ —É–¥–∞–ª–∏—Ç—å
        message_history[chat_id]['bot_msgs'].insert(0, msg)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[user_id] = msg.message_id

    except Exception:
        msg = await callback.message.answer(
            "üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±.):\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile")]
            ])
        )
        try:
            await callback.message.delete()
        except:
            pass

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_id = callback.message.chat.id
        if chat_id not in message_history:
            message_history[chat_id] = {'user_msgs': [], 'bot_msgs': []}
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–µ–≥–∫–æ —É–¥–∞–ª–∏—Ç—å
        message_history[chat_id]['bot_msgs'].insert(0, msg)
        if chat_id in last_bot_messages:
            last_bot_messages[chat_id] = msg

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[user_id] = msg.message_id

    await callback.answer()


@error_handler
async def process_deposit_amount(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å—É–º–º—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or user_states[user_id] != "waiting_for_amount":
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        return  # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É

    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    await clean_deposit_messages(message.chat.id)

    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Å—É–º–º–æ–π
    try:
        await message.delete()
    except:
        pass

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞
        amount_text = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–æ–π
        if amount_text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–∞–∑–∞–¥']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
            await show_clean_profile_menu_from_message(message)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        amount_match = re.search(r'\d+', amount_text)
        if not amount_match:
            error_msg = await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 500"
            )
            user_states[user_id] = "waiting_for_amount"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        amount = int(amount_match.group())

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < 100:
            error_msg = await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 —Ä—É–±.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
            )
            user_states[user_id] = "waiting_for_amount"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        if amount > 15000:
            error_msg = await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 15000 —Ä—É–±.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'"
            )
            user_states[user_id] = "waiting_for_amount"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
        from yookassa_integration import create_payment
        payment_url, payment_id = await create_payment(
            user_id=user_id,
            amount=amount,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} —Ä—É–±."
        )

        if payment_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            try:
                payment_msg = await message.answer(
                    f"üí≥ <b>–ü–ª–∞—Ç—ë–∂ —Å–æ–∑–¥–∞–Ω</b>\n\n"
                    f"–°—É–º–º–∞: <b>{amount} —Ä—É–±.</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)]
                    ])
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                payment_checks[payment_id] = {
                    'user_id': user_id,
                    'message_id': payment_msg.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
                    'chat_id': message.chat.id,
                    'amount': amount,
                    'check_count': 0,
                    'handled': False
                }

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                asyncio.create_task(auto_check_payment(payment_id))

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")
                payment_msg = await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                    ])
                )
        else:
            payment_msg = await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
                ])
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[user_id] = payment_msg.message_id

    except ValueError:
        error_msg = await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 500"
        )
        user_states[user_id] = "waiting_for_amount"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        try:
            await error_msg.delete()
        except:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        error_msg = await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")]
            ])
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[user_id] = error_msg.message_id


@error_handler
async def clean_deposit_messages(chat_id: int):
    """–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞"""
    try:
        from state import message_history, last_bot_messages
        if chat_id in message_history:
            bot_msgs = message_history[chat_id]['bot_msgs']
            for msg in bot_msgs[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if msg and hasattr(msg, 'message_id'):
                    try:
                        text = msg.text if hasattr(msg, 'text') else ""
                        if "üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞" in text or "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" in text:
                            await bot.delete_message(chat_id, msg.message_id)
                            if msg in message_history[chat_id]['bot_msgs']:
                                message_history[chat_id]['bot_msgs'].remove(
                                    msg)
                    except:
                        pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")


@error_handler
async def auto_check_payment(payment_id: str):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(5)

        payment_info = payment_checks.get(payment_id)
        if not payment_info:
            return

        max_checks = 12
        check_interval = 5  # —Å–µ–∫—É–Ω–¥

        for _ in range(max_checks):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
                from yookassa_integration import check_payment_status, processed_payments

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ –ø–ª–∞—Ç–µ–∂
                if payment_id in processed_payments:
                    print(
                        f"–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                    break

                status = await check_payment_status(payment_id)

                print(f"–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ {payment_id}: —Å—Ç–∞—Ç—É—Å = {status}")

                if status == "succeeded":
                    print(
                        f"–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                    break

                elif status == "canceled":
                    print(
                        f"–ê–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞: –ø–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
                    break

                elif status == "pending":
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    await asyncio.sleep(check_interval)
                    continue
                else:
                    await asyncio.sleep(check_interval)
                    continue

            except Exception as e:
                print(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
                await asyncio.sleep(check_interval)
                continue

        # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        if payment_id in payment_checks:
            del payment_checks[payment_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ auto_check_payment: {e}")


@error_handler
async def handle_successful_payment(payment_info: dict, payment_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        user_id = payment_info['user_id']
        chat_id = payment_info['chat_id']
        payment_message_id = payment_info.get(
            'message_id')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ
        amount = payment_info['amount']

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_purchase_balance(user_id, amount)

        # 1. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ (–µ—Å–ª–∏ –∑–Ω–∞–µ–º –µ–≥–æ ID)
        if payment_message_id:
            try:
                await bot.delete_message(chat_id, payment_message_id)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ {payment_message_id} —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ: {e}")

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_msg = None
        try:
            success_msg = await bot.send_message(
                chat_id,
                f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.!"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")

        # 3. –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        try:
            user = get_user(user_id)
            if user:
                from messages import get_profile_text, get_subscription_info_text
                profile_text = get_profile_text(user)
                sub_text = get_subscription_info_text(user)
                full_text = f"{profile_text}\n\n{sub_text}"

                profile_msg = await bot.send_message(
                    chat_id,
                    full_text,
                    reply_markup=get_profile_keyboard(user_id)
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                from bot import profile_message_ids
                profile_message_ids[user_id] = profile_msg.message_id

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                active_user_messages[user_id] = profile_msg.message_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")

        # 4. –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
        if success_msg:
            await asyncio.sleep(3)
            try:
                await success_msg.delete()
                print("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —É–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ: {e}")

        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        if payment_id in payment_checks:
            del payment_checks[payment_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@error_handler
async def handle_canceled_payment(payment_info: dict, payment_id: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        user_id = payment_info['user_id']
        chat_id = payment_info['chat_id']
        message_id = payment_info['message_id']

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        try:
            msg = await bot.edit_message_text(
                chat_id=chat_id,
                message_id=message_id,
                text="‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üí≥ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="deposit")]
                ])
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            active_user_messages[user_id] = msg.message_id
        except:
            pass

        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)
        if payment_id in payment_checks:
            del payment_checks[payment_id]

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@error_handler
async def handle_referral_withdrawal_request(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"""
    from database import get_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
    if callback.from_user.id in active_user_messages and active_user_messages[callback.from_user.id] != callback.message.message_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await callback.message.delete()
        except:
            pass
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –º–µ–Ω—é. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)
        return

    user_id = callback.from_user.id
    user = get_user(user_id)

    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    referral_balance = user.get('referral_balance', 0)

    if referral_balance < MIN_REFERRAL_WITHDRAWAL:
        await callback.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_REFERRAL_WITHDRAWAL} —Ä—É–±.", show_alert=True)
        return

    # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    user_states[user_id] = 'waiting_for_withdrawal_amount'

    msg = await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–±–∞–ª–∞–Ω—Å: {referral_balance} —Ä—É–±.):\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_REFERRAL_WITHDRAWAL} —Ä—É–±.\n\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="referral")]
        ])
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    active_user_messages[user_id] = msg.message_id
    await callback.answer()


@error_handler
async def process_referral_withdrawal_amount(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —Å—É–º–º—ã –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_states or user_states[user_id] != 'waiting_for_withdrawal_amount':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await message.delete()
        except:
            pass
        return

    # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]

    try:
        amount_text = message.text.strip().lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –æ—Ç–º–µ–Ω–æ–π
        if amount_text in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '–Ω–∞–∑–∞–¥']:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É
            from profile import show_referral_program
            callback_data = type('CallbackData', (), {
                'from_user': type('FromUser', (), {'id': user_id}),
                'message': message
            })()
            await show_referral_program(callback_data)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        amount_match = re.search(r'\d+', amount_text)
        if not amount_match:
            error_msg = await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
                "–ü—Ä–∏–º–µ—Ä: 500"
            )
            user_states[user_id] = 'waiting_for_withdrawal_amount'
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        amount = int(amount_match.group())

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from database import get_user
        user = get_user(user_id)
        if not user:
            error_msg = await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            active_user_messages[user_id] = error_msg.message_id
            return

        referral_balance = user.get('referral_balance', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
        if amount < MIN_REFERRAL_WITHDRAWAL:
            error_msg = await message.answer(
                f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_REFERRAL_WITHDRAWAL} —Ä—É–±.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )
            user_states[user_id] = 'waiting_for_withdrawal_amount'
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if amount > referral_balance:
            error_msg = await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ.\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {referral_balance} —Ä—É–±.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–æ—Ç–º–µ–Ω–∞'"
            )
            user_states[user_id] = 'waiting_for_withdrawal_amount'
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            try:
                await error_msg.delete()
            except:
                pass
            return

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã—á—Ç–µ–º —Å—É–º–º—É –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        from database import update_referral_balance
        update_referral_balance(user_id, -amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞)
        try:
            from config import ROOT_ADMIN_ID
            from shared import bot
            await bot.send_message(
                ROOT_ADMIN_ID,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤:\n"
                f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"Username: @{message.from_user.username if message.from_user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success_msg = await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} —Ä—É–±. –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        from profile import show_referral_program
        callback_data = type('CallbackData', (), {
            'from_user': type('FromUser', (), {'id': user_id}),
            'message': message
        })()
        await show_referral_program(callback_data)

    except ValueError:
        error_msg = await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)\n\n"
            "–ü—Ä–∏–º–µ—Ä: 500"
        )
        user_states[user_id] = 'waiting_for_withdrawal_amount'
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        try:
            await error_msg.delete()
        except:
            pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞: {e}")
        error_msg = await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral")]
            ])
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[user_id] = error_msg.message_id


@error_handler
async def show_clean_profile_menu_from_message(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —á–∏—Å—Ç–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    from messages import get_profile_text, get_subscription_info_text
    user = get_user(message.from_user.id)
    if not user:
        error_msg = await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[message.from_user.id] = error_msg.message_id
        return

    try:
        profile_text = get_profile_text(user)
        sub_text = get_subscription_info_text(user)
        full_text = f"{profile_text}\n\n{sub_text}"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        full_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"

    try:
        keyboard = get_profile_keyboard(message.from_user.id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])

    # –û—á–∏—â–∞–µ–º —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    try:
        from bot import clean_previous_messages
        await clean_previous_messages(message.chat.id)
        msg = await message.answer(full_text, reply_markup=keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        from state import message_history, last_bot_messages
        if message.chat.id not in message_history:
            message_history[message.chat.id] = {
                'user_msgs': [], 'bot_msgs': []}
        message_history[message.chat.id]['bot_msgs'].append(msg)
        last_bot_messages[message.chat.id] = msg

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[message.from_user.id] = msg.message_id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        msg = await message.answer(full_text, reply_markup=keyboard)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        active_user_messages[message.from_user.id] = msg.message_id

__all__ = ['get_profile_keyboard', 'show_referral_program', 'handle_exchange_referral_balance',
           'show_clean_profile_menu', 'show_profile', 'deposit_balance', 'process_deposit_amount',
           'handle_referral_withdrawal_request', 'process_referral_withdrawal_amount']
