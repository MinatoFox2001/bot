from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database import update_subscription, get_user, update_balance, is_subscription_active  
from messages import get_subscription_menu_text
from profile import get_profile_keyboard, show_profile
from state import last_bot_messages, message_history, chat_histories
from shared import get_bot

PRICES = {
    'tier1': 300,
    'tier2': 500,
    'tier3': 700
}

DURATIONS = {
    'tier1': 30,
    'tier2': 30,
    'tier3': 30
}

REFERRAL_PERCENTS = {
    1: 0.15,  # 15% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1 —É—Ä–æ–≤–Ω—è
    2: 0.10,  # 10% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 2 —É—Ä–æ–≤–Ω—è
    3: 0.05   # 5% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 3 —É—Ä–æ–≤–Ω—è
}

def get_subscriptions_keyboard(user_id: int) -> InlineKeyboardMarkup:
    from database import get_user, is_subscription_active
    
    user = get_user(user_id)
    if not user:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
    
    current_sub = user.get('subscription_type', 'free')
    active = is_subscription_active(user_id)
    buttons = []
    
    # –ï—Å–ª–∏ —ç—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (Eclipse)
    if current_sub == 'tier3':
        pass
    # –ï—Å–ª–∏ —ç—Ç–æ Nova
    elif current_sub == 'tier2':
        if active:
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
        else:
            # –ò—Å—Ç–µ–∫—à–∞—è Nova - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    # –ï—Å–ª–∏ —ç—Ç–æ Pulse
    elif current_sub == 'tier1':
        if active:
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
        else:
            # –ò—Å—Ç–µ–∫—à–∏–π Pulse - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            buttons.append([InlineKeyboardButton(text="Zenith Pulse - 300‚ÇΩ", callback_data="sub_tier1")])
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    # –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è (Spark)
    else:
        buttons.append([InlineKeyboardButton(text="Zenith Pulse - 300‚ÇΩ", callback_data="sub_tier1")])
        buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
        buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def show_subscriptions_menu(callback: CallbackQuery):
    try:
        keyboard = get_subscriptions_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            text=get_subscription_menu_text(callback.from_user.id),
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_subscriptions_menu: {e}")
        await callback.answer()

async def handle_subscription_selection(callback: CallbackQuery):
    try:
        sub_type = callback.data.split("_")[1]
        user_id = callback.from_user.id
        user = get_user(user_id)

        if sub_type in PRICES:
            # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –±–∞–ª–∞–Ω—Å–∞ ...

            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            update_balance(user_id, -final_price)
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–∫–∏–¥–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
            if discount:
                from database import mark_discount_as_used
                mark_discount_as_used(user_id, discount['discount_code'])

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            update_subscription(user_id, sub_type, DURATIONS[sub_type])

            # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
            await process_referral_bonuses(user_id, original_price, sub_type)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
            price_info = f"üí≥ –°–ø–∏—Å–∞–Ω–æ {final_price} —Ä—É–±."
            if discount_percent > 0:
                price_info += f" (—Å–∫–∏–¥–∫–∞ {discount_percent}%: -{discount_amount} —Ä—É–±.)"
            
            await callback.message.edit_text(
                text=f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {get_subscription_name(sub_type)}.\n"
                     f"{price_info}\n"
                     f"üìÖ –ò—Å—Ç–µ–∫–∞–µ—Ç: {(datetime.now() + timedelta(days=DURATIONS[sub_type])).strftime('%d.%m.%Y')}",
                reply_markup=get_profile_keyboard(user_id)
            )
            await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_subscription_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")

def get_subscription_name(sub_type: str) -> str:
    names = {
        'free': 'Zenith Spark',
        'tier1': 'Zenith Pulse',
        'tier2': 'Zenith Nova',
        'tier3': 'Zenith Eclipse'
    }
    return names.get(sub_type, 'Zenith Spark')

async def handle_back_to_profile(callback: CallbackQuery):
    bot = get_bot()
    try:
        await callback.answer()
        await callback.message.delete()
        await show_profile(callback, bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_profile: {e}")
        await callback.answer()

async def process_referral_bonuses(user_id: int, amount: float, sub_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤"""
    from database import get_referrer_id, add_referral_payment, update_balance
    
    current_id = user_id
    for level in range(1, 4):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 3 —É—Ä–æ–≤–Ω—è
        referrer_id = get_referrer_id(current_id)
        if not referrer_id:
            break
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        bonus = amount * REFERRAL_PERCENTS[level]
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        update_balance(referrer_id, bonus)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        add_referral_payment(user_id, referrer_id, bonus, level, sub_type)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        current_id = referrer_id