from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from database import update_purchase_balance, update_referral_balance
from messages import get_subscription_menu_text, get_profile_text, get_subscription_info_text
from profile import get_profile_keyboard

PRICES = {
    'tier1': 300,
    'tier2': 500,
    'tier3': 700
}

DURATIONS = {
    'tier1': 30,
    'tier2': 30,
    'tier3': 30
}

REFERRAL_PERCENTS = {
    1: 0.15,  # 15% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 1 —É—Ä–æ–≤–Ω—è
    2: 0.10,  # 10% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 2 —É—Ä–æ–≤–Ω—è
    3: 0.05   # 5% –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 3 —É—Ä–æ–≤–Ω—è
}

def get_subscriptions_keyboard(user_id: int) -> InlineKeyboardMarkup:
    from database import get_user, is_subscription_active
    
    user = get_user(user_id)
    if not user:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
    
    current_sub = user.get('subscription_type', 'free')
    active = is_subscription_active(user_id)
    buttons = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if current_sub == 'tier3':
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ - –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–ª–∏—Ç—å
        buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)", callback_data="sub_tier3")])
    elif current_sub == 'tier2':
        if active:
            # Nova –∞–∫—Ç–∏–≤–Ω–∞ - –º–æ–∂–Ω–æ –∞–ø–≥—Ä–µ–π–¥ –¥–æ Eclipse
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
        else:
            # Nova –∏—Å—Ç–µ–∫–ª–∞ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –∞–ø–≥—Ä–µ–π–¥
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    elif current_sub == 'tier1':
        if active:
            # Pulse –∞–∫—Ç–∏–≤–Ω–∞ - –º–æ–∂–Ω–æ –∞–ø–≥—Ä–µ–π–¥ –¥–æ Nova –∏–ª–∏ Eclipse
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
        else:
            # Pulse –∏—Å—Ç–µ–∫–ª–∞ - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç—å –∏–ª–∏ –∞–ø–≥—Ä–µ–π–¥
            buttons.append([InlineKeyboardButton(text="Zenith Pulse - 300‚ÇΩ (–ø—Ä–æ–¥–ª–µ–Ω–∏–µ)", callback_data="sub_tier1")])
            buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
            buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    else:
        # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è - –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ª—é–±—É—é
        buttons.append([InlineKeyboardButton(text="Zenith Pulse - 300‚ÇΩ", callback_data="sub_tier1")])
        buttons.append([InlineKeyboardButton(text="Zenith Nova - 500‚ÇΩ", callback_data="sub_tier2")])
        buttons.append([InlineKeyboardButton(text="Zenith Eclipse - 700‚ÇΩ", callback_data="sub_tier3")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def show_subscriptions_menu(callback: CallbackQuery):
    try:
        keyboard = get_subscriptions_keyboard(callback.from_user.id)
        await callback.message.edit_text(
            text=get_subscription_menu_text(callback.from_user.id),
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_subscriptions_menu: {e}")
        await callback.answer()

async def handle_subscription_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = callback.from_user.id
        sub_type = callback.data.replace("sub_", "")
        
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ {sub_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        if sub_type not in ['tier1', 'tier2', 'tier3']:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = get_user(user_id)
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        prices = {
            'tier1': 300,
            'tier2': 500,
            'tier3': 700
        }
        
        sub_names = {
            'tier1': 'Zenith Pulse',
            'tier2': 'Zenith Nova',
            'tier3': 'Zenith Eclipse'
        }
        
        price = prices.get(sub_type, 0)
        sub_name = sub_names.get(sub_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
        discount_info = get_user_active_discount(user_id)
        discount_percent = 0
        if discount_info:
            discount_percent = discount_info['discount_percent']
            final_price = price * (100 - discount_percent) / 100
        else:
            final_price = price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        purchase_balance = user.get('balance', 0)
        if purchase_balance < final_price:
            await callback.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–æ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è {int(final_price)} —Ä—É–±.", show_alert=True)
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–æ–∫
        update_purchase_balance(user_id, -int(final_price))
        
        # –û—Ç–º–µ—á–∞–µ–º —Å–∫–∏–¥–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é (–µ—Å–ª–∏ –±—ã–ª–∞)
        if discount_info:
            mark_discount_as_used(user_id, discount_info['discount_code'])
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π
        update_subscription(user_id, sub_type, 30)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã
        await process_referral_bonuses(user_id, final_price, sub_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        success_text = (
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"üì∂ –ü–æ–¥–ø–∏—Å–∫–∞: {sub_name}\n"
            f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {int(final_price)} —Ä—É–±. —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫—É–ø–æ–∫"
        )
        if discount_percent > 0:
            success_text += f"\nüéÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ —Å–∫–∏–¥–∫–∞: {discount_percent}%"
        
        await callback.answer(success_text, show_alert=True)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
        from messages import get_profile_text, get_subscription_info_text
        from profile import get_profile_keyboard
        
        user = get_user(user_id)
        profile_text = get_profile_text(user) if user else "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        sub_text = get_subscription_info_text(user) if user else ""
        full_text = f"{profile_text}\n\n{sub_text}"
        full_text += f"\n\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {sub_name} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!"
        
        await callback.message.edit_text(
            text=full_text,
            reply_markup=get_profile_keyboard(user_id)
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except:
            pass
        
def get_subscription_name(sub_type: str) -> str:
    names = {
        'free': 'Zenith Spark',
        'tier1': 'Zenith Pulse',
        'tier2': 'Zenith Nova',
        'tier3': 'Zenith Eclipse'
    }
    return names.get(sub_type, 'Zenith Spark')

async def handle_back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        from database import get_user as db_get_user
        from messages import get_profile_text, get_subscription_info_text
        from profile import get_profile_keyboard
        
        user_id = callback.from_user.id
        user = db_get_user(user_id)
        
        if user:
            profile_text = get_profile_text(user)
            sub_text = get_subscription_info_text(user)
            full_text = f"{profile_text}\n\n{sub_text}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            try:
                current_text = callback.message.text
                if current_text != full_text:
                    await callback.message.edit_text(
                        text=full_text,
                        reply_markup=get_profile_keyboard(user_id)
                    )
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    try:
                        await callback.message.edit_reply_markup(
                            reply_markup=get_profile_keyboard(user_id)
                        )
                    except:
                        pass
            except:
                await callback.message.edit_text(
                    text=full_text,
                    reply_markup=get_profile_keyboard(user_id)
                )
            
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º callback.answer(), –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ä–∞–Ω–µ–µ
            try:
                await callback.answer()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ callback —É–∂–µ –∏—Å—Ç–µ–∫
        else:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_profile: {e}")
        # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å callback.answer(), –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        pass

async def process_referral_bonuses(user_id: int, amount: float, sub_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –¥–ª—è —Ü–µ–ø–æ—á–∫–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤"""
    from database import get_referrer_id, add_referral_payment, update_referral_balance
    
    current_id = user_id
    print(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å—É–º–º–∞: {amount}")
    
    for level in range(1, 4):  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 3 —É—Ä–æ–≤–Ω—è
        referrer_id = get_referrer_id(current_id)
        if not referrer_id:
            print(f"–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —É—Ä–æ–≤–Ω—è {level} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_id}")
            break
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–æ–Ω—É—Å
        bonus = amount * REFERRAL_PERCENTS[level]
        
        print(f"–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ —É—Ä–æ–≤–Ω—è {level}: {bonus} —Ä—É–±. —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}")
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        update_referral_balance(referrer_id, bonus)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        add_referral_payment(user_id, referrer_id, bonus, level, sub_type)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–≤–Ω—é
        current_id = referrer_id

__all__ = ['show_subscriptions_menu', 'handle_subscription_selection', 'handle_back_to_profile', 'get_subscriptions_keyboard']